[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "Celery",
        "importPath": "celery",
        "description": "celery",
        "isExtraImport": true,
        "detail": "celery",
        "documentation": {}
    },
    {
        "label": "shared_task",
        "importPath": "celery",
        "description": "celery",
        "isExtraImport": true,
        "detail": "celery",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "api_view",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "api_view",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "make_password",
        "importPath": "django.contrib.auth.hashers",
        "description": "django.contrib.auth.hashers",
        "isExtraImport": true,
        "detail": "django.contrib.auth.hashers",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "send_mail",
        "importPath": "django.core.mail",
        "description": "django.core.mail",
        "isExtraImport": true,
        "detail": "django.core.mail",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "ceil",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "backend.core.asgi",
        "description": "backend.core.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "backend.core.asgi",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "backend.core.celery",
        "description": "backend.core.celery",
        "peekOfCode": "app = Celery(\"core\")\napp.config_from_object(\"django.conf:settings\", namespace=\"CELERY\")\napp.autodiscover_tasks()",
        "detail": "backend.core.celery",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "backend.core.settings",
        "description": "backend.core.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\nSECRET_KEY = os.getenv(\"DJANGO_SECRET_KEY\", \"dev-secret-do-not-use\")\nDEBUG = os.getenv(\"DEBUG\", \"1\") == \"1\"\nALLOWED_HOSTS = os.getenv(\"ALLOWED_HOSTS\", \"*\").split(\",\")\nADMIN_API_KEY = os.getenv(\"ADMIN_API_KEY\", \"\").strip() # Clave para admin API\nINSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",",
        "detail": "backend.core.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "backend.core.settings",
        "description": "backend.core.settings",
        "peekOfCode": "SECRET_KEY = os.getenv(\"DJANGO_SECRET_KEY\", \"dev-secret-do-not-use\")\nDEBUG = os.getenv(\"DEBUG\", \"1\") == \"1\"\nALLOWED_HOSTS = os.getenv(\"ALLOWED_HOSTS\", \"*\").split(\",\")\nADMIN_API_KEY = os.getenv(\"ADMIN_API_KEY\", \"\").strip() # Clave para admin API\nINSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",",
        "detail": "backend.core.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "backend.core.settings",
        "description": "backend.core.settings",
        "peekOfCode": "DEBUG = os.getenv(\"DEBUG\", \"1\") == \"1\"\nALLOWED_HOSTS = os.getenv(\"ALLOWED_HOSTS\", \"*\").split(\",\")\nADMIN_API_KEY = os.getenv(\"ADMIN_API_KEY\", \"\").strip() # Clave para admin API\nINSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",\n    \"django.contrib.staticfiles\",",
        "detail": "backend.core.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "backend.core.settings",
        "description": "backend.core.settings",
        "peekOfCode": "ALLOWED_HOSTS = os.getenv(\"ALLOWED_HOSTS\", \"*\").split(\",\")\nADMIN_API_KEY = os.getenv(\"ADMIN_API_KEY\", \"\").strip() # Clave para admin API\nINSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",\n    \"django.contrib.staticfiles\",\n    \"rest_framework\",",
        "detail": "backend.core.settings",
        "documentation": {}
    },
    {
        "label": "ADMIN_API_KEY",
        "kind": 5,
        "importPath": "backend.core.settings",
        "description": "backend.core.settings",
        "peekOfCode": "ADMIN_API_KEY = os.getenv(\"ADMIN_API_KEY\", \"\").strip() # Clave para admin API\nINSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",\n    \"django.contrib.staticfiles\",\n    \"rest_framework\",\n    \"corsheaders\",",
        "detail": "backend.core.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "backend.core.settings",
        "description": "backend.core.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",\n    \"django.contrib.staticfiles\",\n    \"rest_framework\",\n    \"corsheaders\",\n    \"participants\",",
        "detail": "backend.core.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "backend.core.settings",
        "description": "backend.core.settings",
        "peekOfCode": "MIDDLEWARE = [\n    \"corsheaders.middleware.CorsMiddleware\",\n    \"django.middleware.security.SecurityMiddleware\",\n    \"django.contrib.sessions.middleware.SessionMiddleware\",\n    \"django.middleware.common.CommonMiddleware\",\n    \"django.middleware.csrf.CsrfViewMiddleware\",\n    \"django.contrib.auth.middleware.AuthenticationMiddleware\",\n    \"django.contrib.messages.middleware.MessageMiddleware\",\n    \"django.middleware.clickjacking.XFrameOptionsMiddleware\",\n]",
        "detail": "backend.core.settings",
        "documentation": {}
    },
    {
        "label": "CORS_ALLOW_ALL_ORIGINS",
        "kind": 5,
        "importPath": "backend.core.settings",
        "description": "backend.core.settings",
        "peekOfCode": "CORS_ALLOW_ALL_ORIGINS = True  # dev\nROOT_URLCONF = \"core.urls\"\n# Templates de Django\nTEMPLATES = [{\n    \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n    \"DIRS\": [],\n    \"APP_DIRS\": True,\n    \"OPTIONS\": {\n        \"context_processors\": [\n            \"django.template.context_processors.debug\",",
        "detail": "backend.core.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "backend.core.settings",
        "description": "backend.core.settings",
        "peekOfCode": "ROOT_URLCONF = \"core.urls\"\n# Templates de Django\nTEMPLATES = [{\n    \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n    \"DIRS\": [],\n    \"APP_DIRS\": True,\n    \"OPTIONS\": {\n        \"context_processors\": [\n            \"django.template.context_processors.debug\",\n            \"django.template.context_processors.request\",",
        "detail": "backend.core.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "backend.core.settings",
        "description": "backend.core.settings",
        "peekOfCode": "TEMPLATES = [{\n    \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n    \"DIRS\": [],\n    \"APP_DIRS\": True,\n    \"OPTIONS\": {\n        \"context_processors\": [\n            \"django.template.context_processors.debug\",\n            \"django.template.context_processors.request\",\n            \"django.contrib.auth.context_processors.auth\",\n            \"django.contrib.messages.context_processors.messages\",",
        "detail": "backend.core.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "backend.core.settings",
        "description": "backend.core.settings",
        "peekOfCode": "WSGI_APPLICATION = \"core.wsgi.application\"\nDATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.db.backends.sqlite3\",\n        \"NAME\": BASE_DIR / \"db.sqlite3\",\n    }\n}\n# Password validation (desactivada en dev)\nAUTH_PASSWORD_VALIDATORS = []  \nLANGUAGE_CODE = \"es-cl\"",
        "detail": "backend.core.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "backend.core.settings",
        "description": "backend.core.settings",
        "peekOfCode": "DATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.db.backends.sqlite3\",\n        \"NAME\": BASE_DIR / \"db.sqlite3\",\n    }\n}\n# Password validation (desactivada en dev)\nAUTH_PASSWORD_VALIDATORS = []  \nLANGUAGE_CODE = \"es-cl\"\nTIME_ZONE = \"America/Santiago\"",
        "detail": "backend.core.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "backend.core.settings",
        "description": "backend.core.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = []  \nLANGUAGE_CODE = \"es-cl\"\nTIME_ZONE = \"America/Santiago\"\nUSE_I18N = True\nUSE_TZ = True\nSTATIC_URL = \"static/\"\n# DRF\nREST_FRAMEWORK = {\n    \"DEFAULT_RENDERER_CLASSES\": [\"rest_framework.renderers.JSONRenderer\"],\n}",
        "detail": "backend.core.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "backend.core.settings",
        "description": "backend.core.settings",
        "peekOfCode": "LANGUAGE_CODE = \"es-cl\"\nTIME_ZONE = \"America/Santiago\"\nUSE_I18N = True\nUSE_TZ = True\nSTATIC_URL = \"static/\"\n# DRF\nREST_FRAMEWORK = {\n    \"DEFAULT_RENDERER_CLASSES\": [\"rest_framework.renderers.JSONRenderer\"],\n}\n# Email ",
        "detail": "backend.core.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "backend.core.settings",
        "description": "backend.core.settings",
        "peekOfCode": "TIME_ZONE = \"America/Santiago\"\nUSE_I18N = True\nUSE_TZ = True\nSTATIC_URL = \"static/\"\n# DRF\nREST_FRAMEWORK = {\n    \"DEFAULT_RENDERER_CLASSES\": [\"rest_framework.renderers.JSONRenderer\"],\n}\n# Email \nEMAIL_BACKEND = os.getenv(\"EMAIL_BACKEND\", \"django.core.mail.backends.console.EmailBackend\")",
        "detail": "backend.core.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "backend.core.settings",
        "description": "backend.core.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\nSTATIC_URL = \"static/\"\n# DRF\nREST_FRAMEWORK = {\n    \"DEFAULT_RENDERER_CLASSES\": [\"rest_framework.renderers.JSONRenderer\"],\n}\n# Email \nEMAIL_BACKEND = os.getenv(\"EMAIL_BACKEND\", \"django.core.mail.backends.console.EmailBackend\")\nDEFAULT_FROM_EMAIL = os.getenv(\"DEFAULT_FROM_EMAIL\", \"no-reply@ctsturismo.local\")",
        "detail": "backend.core.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "backend.core.settings",
        "description": "backend.core.settings",
        "peekOfCode": "USE_TZ = True\nSTATIC_URL = \"static/\"\n# DRF\nREST_FRAMEWORK = {\n    \"DEFAULT_RENDERER_CLASSES\": [\"rest_framework.renderers.JSONRenderer\"],\n}\n# Email \nEMAIL_BACKEND = os.getenv(\"EMAIL_BACKEND\", \"django.core.mail.backends.console.EmailBackend\")\nDEFAULT_FROM_EMAIL = os.getenv(\"DEFAULT_FROM_EMAIL\", \"no-reply@ctsturismo.local\")\nFRONTEND_URL = os.getenv(\"FRONTEND_URL\", \"http://localhost:3002\")",
        "detail": "backend.core.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "backend.core.settings",
        "description": "backend.core.settings",
        "peekOfCode": "STATIC_URL = \"static/\"\n# DRF\nREST_FRAMEWORK = {\n    \"DEFAULT_RENDERER_CLASSES\": [\"rest_framework.renderers.JSONRenderer\"],\n}\n# Email \nEMAIL_BACKEND = os.getenv(\"EMAIL_BACKEND\", \"django.core.mail.backends.console.EmailBackend\")\nDEFAULT_FROM_EMAIL = os.getenv(\"DEFAULT_FROM_EMAIL\", \"no-reply@ctsturismo.local\")\nFRONTEND_URL = os.getenv(\"FRONTEND_URL\", \"http://localhost:3002\")\n# Celery ",
        "detail": "backend.core.settings",
        "documentation": {}
    },
    {
        "label": "REST_FRAMEWORK",
        "kind": 5,
        "importPath": "backend.core.settings",
        "description": "backend.core.settings",
        "peekOfCode": "REST_FRAMEWORK = {\n    \"DEFAULT_RENDERER_CLASSES\": [\"rest_framework.renderers.JSONRenderer\"],\n}\n# Email \nEMAIL_BACKEND = os.getenv(\"EMAIL_BACKEND\", \"django.core.mail.backends.console.EmailBackend\")\nDEFAULT_FROM_EMAIL = os.getenv(\"DEFAULT_FROM_EMAIL\", \"no-reply@ctsturismo.local\")\nFRONTEND_URL = os.getenv(\"FRONTEND_URL\", \"http://localhost:3002\")\n# Celery \nUSE_CELERY = os.getenv(\"USE_CELERY\", \"0\") == \"1\"\nCELERY_BROKER_URL = os.getenv(\"CELERY_BROKER_URL\", \"redis://localhost:6379/0\")",
        "detail": "backend.core.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_BACKEND",
        "kind": 5,
        "importPath": "backend.core.settings",
        "description": "backend.core.settings",
        "peekOfCode": "EMAIL_BACKEND = os.getenv(\"EMAIL_BACKEND\", \"django.core.mail.backends.console.EmailBackend\")\nDEFAULT_FROM_EMAIL = os.getenv(\"DEFAULT_FROM_EMAIL\", \"no-reply@ctsturismo.local\")\nFRONTEND_URL = os.getenv(\"FRONTEND_URL\", \"http://localhost:3002\")\n# Celery \nUSE_CELERY = os.getenv(\"USE_CELERY\", \"0\") == \"1\"\nCELERY_BROKER_URL = os.getenv(\"CELERY_BROKER_URL\", \"redis://localhost:6379/0\")\nCELERY_RESULT_BACKEND = os.getenv(\"CELERY_RESULT_BACKEND\", \"redis://localhost:6379/0\")\n# Define el tipo de PK por defecto (evita el warning W042)\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"",
        "detail": "backend.core.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_FROM_EMAIL",
        "kind": 5,
        "importPath": "backend.core.settings",
        "description": "backend.core.settings",
        "peekOfCode": "DEFAULT_FROM_EMAIL = os.getenv(\"DEFAULT_FROM_EMAIL\", \"no-reply@ctsturismo.local\")\nFRONTEND_URL = os.getenv(\"FRONTEND_URL\", \"http://localhost:3002\")\n# Celery \nUSE_CELERY = os.getenv(\"USE_CELERY\", \"0\") == \"1\"\nCELERY_BROKER_URL = os.getenv(\"CELERY_BROKER_URL\", \"redis://localhost:6379/0\")\nCELERY_RESULT_BACKEND = os.getenv(\"CELERY_RESULT_BACKEND\", \"redis://localhost:6379/0\")\n# Define el tipo de PK por defecto (evita el warning W042)\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"",
        "detail": "backend.core.settings",
        "documentation": {}
    },
    {
        "label": "FRONTEND_URL",
        "kind": 5,
        "importPath": "backend.core.settings",
        "description": "backend.core.settings",
        "peekOfCode": "FRONTEND_URL = os.getenv(\"FRONTEND_URL\", \"http://localhost:3002\")\n# Celery \nUSE_CELERY = os.getenv(\"USE_CELERY\", \"0\") == \"1\"\nCELERY_BROKER_URL = os.getenv(\"CELERY_BROKER_URL\", \"redis://localhost:6379/0\")\nCELERY_RESULT_BACKEND = os.getenv(\"CELERY_RESULT_BACKEND\", \"redis://localhost:6379/0\")\n# Define el tipo de PK por defecto (evita el warning W042)\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"",
        "detail": "backend.core.settings",
        "documentation": {}
    },
    {
        "label": "USE_CELERY",
        "kind": 5,
        "importPath": "backend.core.settings",
        "description": "backend.core.settings",
        "peekOfCode": "USE_CELERY = os.getenv(\"USE_CELERY\", \"0\") == \"1\"\nCELERY_BROKER_URL = os.getenv(\"CELERY_BROKER_URL\", \"redis://localhost:6379/0\")\nCELERY_RESULT_BACKEND = os.getenv(\"CELERY_RESULT_BACKEND\", \"redis://localhost:6379/0\")\n# Define el tipo de PK por defecto (evita el warning W042)\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"",
        "detail": "backend.core.settings",
        "documentation": {}
    },
    {
        "label": "CELERY_BROKER_URL",
        "kind": 5,
        "importPath": "backend.core.settings",
        "description": "backend.core.settings",
        "peekOfCode": "CELERY_BROKER_URL = os.getenv(\"CELERY_BROKER_URL\", \"redis://localhost:6379/0\")\nCELERY_RESULT_BACKEND = os.getenv(\"CELERY_RESULT_BACKEND\", \"redis://localhost:6379/0\")\n# Define el tipo de PK por defecto (evita el warning W042)\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"",
        "detail": "backend.core.settings",
        "documentation": {}
    },
    {
        "label": "CELERY_RESULT_BACKEND",
        "kind": 5,
        "importPath": "backend.core.settings",
        "description": "backend.core.settings",
        "peekOfCode": "CELERY_RESULT_BACKEND = os.getenv(\"CELERY_RESULT_BACKEND\", \"redis://localhost:6379/0\")\n# Define el tipo de PK por defecto (evita el warning W042)\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"",
        "detail": "backend.core.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "backend.core.settings",
        "description": "backend.core.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"",
        "detail": "backend.core.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "backend.core.urls",
        "description": "backend.core.urls",
        "peekOfCode": "urlpatterns = [\n    path(\"admin/\", admin.site.urls),\n    path(\"api/\", include(\"participants.urls\")),\n    path(\"api/\", include(\"coreapi.urls\")),\n]",
        "detail": "backend.core.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "backend.core.wsgi",
        "description": "backend.core.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "backend.core.wsgi",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "backend.coreapi.urls",
        "description": "backend.coreapi.urls",
        "peekOfCode": "urlpatterns = [\n    path(\"health\", health),\n]",
        "detail": "backend.coreapi.urls",
        "documentation": {}
    },
    {
        "label": "health",
        "kind": 2,
        "importPath": "backend.coreapi.views",
        "description": "backend.coreapi.views",
        "peekOfCode": "def health(request):\n    return Response({\"status\": \"ok\"})",
        "detail": "backend.coreapi.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "backend.participants.migrations.0001_initial",
        "description": "backend.participants.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = []\n    operations = [\n        migrations.CreateModel(\n            name=\"Participant\",\n            fields=[\n                (\n                    \"id\",\n                    models.BigAutoField(",
        "detail": "backend.participants.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "ParticipantAdmin",
        "kind": 6,
        "importPath": "backend.participants.admin",
        "description": "backend.participants.admin",
        "peekOfCode": "class ParticipantAdmin(admin.ModelAdmin):\n    list_display = (\"full_name\", \"email\", \"is_verified\", \"created_at\")\n    search_fields = (\"full_name\", \"email\")\n    list_filter = (\"is_verified\", \"created_at\")",
        "detail": "backend.participants.admin",
        "documentation": {}
    },
    {
        "label": "Participant",
        "kind": 6,
        "importPath": "backend.participants.models",
        "description": "backend.participants.models",
        "peekOfCode": "class Participant(models.Model):\n    full_name = models.CharField(max_length=200)\n    email = models.EmailField(unique=True)\n    phone = models.CharField(max_length=50, blank=True, null=True)\n    is_verified = models.BooleanField(default=False)\n    verification_token = models.UUIDField(default=uuid.uuid4, editable=False)\n    password_hash = models.CharField(max_length=128, blank=True)  # se setea tras verificar\n    created_at = models.DateTimeField(auto_now_add=True)\n    def set_password(self, raw_password: str):\n        self.password_hash = make_password(raw_password)",
        "detail": "backend.participants.models",
        "documentation": {}
    },
    {
        "label": "ParticipantCreateSerializer",
        "kind": 6,
        "importPath": "backend.participants.serializers",
        "description": "backend.participants.serializers",
        "peekOfCode": "class ParticipantCreateSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Participant\n        fields = [\"id\", \"full_name\", \"email\", \"phone\", \"is_verified\", \"created_at\"]\n    def validate_email(self, value):\n        if Participant.objects.filter(email__iexact=value).exists():\n            raise serializers.ValidationError(\"Este correo ya está registrado.\")\n        return value",
        "detail": "backend.participants.serializers",
        "documentation": {}
    },
    {
        "label": "send_verification_email_task",
        "kind": 2,
        "importPath": "backend.participants.tasks",
        "description": "backend.participants.tasks",
        "peekOfCode": "def send_verification_email_task(participant_id: int):\n    p = Participant.objects.get(id=participant_id)\n    token = str(p.verification_token)\n    verify_url = f\"{settings.FRONTEND_URL}/verify?token={token}\"\n    subject = \"Verifica tu correo – Sorteo San Valentín\"\n    message = (\n        f\"Hola {p.full_name},\\n\\n\"\n        f\"Gracias por registrarte. Verifica tu cuenta entrando a: {verify_url}\\n\\n\"\n        \"Si desconoces este correo, ignora este mensaje.\"\n    )",
        "detail": "backend.participants.tasks",
        "documentation": {}
    },
    {
        "label": "send_winner_email_task",
        "kind": 2,
        "importPath": "backend.participants.tasks",
        "description": "backend.participants.tasks",
        "peekOfCode": "def send_winner_email_task(participant_id: int):\n    p = Participant.objects.get(id=participant_id)\n    subject = \"¡Felicidades! Eres el ganador – Sorteo San Valentín\"\n    message = (\n        f\"Hola {p.full_name},\\n\\n\"\n        \"¡Felicidades! Has sido seleccionado como ganador del Sorteo San Valentín.\\n\"\n        \"Nos pondremos en contacto contigo para coordinar la entrega del premio.\\n\\n\"\n        \"Saludos,\\nCTS Turismo\"\n    )\n    send_mail(subject, message, settings.DEFAULT_FROM_EMAIL, [p.email])",
        "detail": "backend.participants.tasks",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "backend.participants.urls",
        "description": "backend.participants.urls",
        "peekOfCode": "urlpatterns = [\n    path(\"participants/register/\", register),\n    path(\"participants/verify/<uuid:token>/\", verify_token),\n    path(\"participants/set-password/<int:participant_id>/\", set_password),\n    path(\"debug/celery/\", debug_celery),  # Ruta para verificar si se usa Celery\n      # Admin API\n    path(\"admin/participants/\", admin_participants),  # GET con X-API-Key\n    path(\"admin/draw/\", admin_draw),                  # POST con X-API-Key\n]",
        "detail": "backend.participants.urls",
        "documentation": {}
    },
    {
        "label": "register",
        "kind": 2,
        "importPath": "backend.participants.views",
        "description": "backend.participants.views",
        "peekOfCode": "def register(request):\n    \"\"\"\n    Crea un participante si el email no existe y envía email de verificación.\n    Respuestas:\n    - 201: {\"message\": \"¡Gracias por registrarte! Revisa tu correo para verificar tu cuenta.\"}\n    - 400: errores de validación\n    \"\"\"\n    s = ParticipantCreateSerializer(data=request.data)\n    if not s.is_valid():\n        return Response(s.errors, status=status.HTTP_400_BAD_REQUEST)",
        "detail": "backend.participants.views",
        "documentation": {}
    },
    {
        "label": "verify_token",
        "kind": 2,
        "importPath": "backend.participants.views",
        "description": "backend.participants.views",
        "peekOfCode": "def verify_token(request, token):\n    \"\"\"\n    Verifica el correo a partir del token enviado.\n    \"\"\"\n    participant = get_object_or_404(Participant, verification_token=token)\n    if participant.is_verified:\n        return Response(\n            {\"detail\": \"Ya verificado\", \"participant_id\": participant.id}, status=200\n        )\n    participant.is_verified = True",
        "detail": "backend.participants.views",
        "documentation": {}
    },
    {
        "label": "set_password",
        "kind": 2,
        "importPath": "backend.participants.views",
        "description": "backend.participants.views",
        "peekOfCode": "def set_password(request, participant_id):\n    \"\"\"\n    Crea la contraseña del participante ya verificado.\n    \"\"\"\n    participant = get_object_or_404(Participant, id=participant_id)\n    if not participant.is_verified:\n        return Response({\"detail\": \"Cuenta no verificada\"}, status=403)\n    password = request.data.get(\"password\")\n    if not password or len(password) < 8:\n        return Response({\"password\": \"Debe tener al menos 8 caracteres\"}, status=400)",
        "detail": "backend.participants.views",
        "documentation": {}
    },
    {
        "label": "debug_celery",
        "kind": 2,
        "importPath": "backend.participants.views",
        "description": "backend.participants.views",
        "peekOfCode": "def debug_celery(request):\n    return Response({\"USE_CELERY\": settings.USE_CELERY})\n# Helper para autenticación simple con API Key en header, su función es devolver None si OK, o Response(...) si falla.\ndef _require_api_key(request):\n    \"\"\"\n    Valida el header X-API-Key contra settings.ADMIN_API_KEY.\n    Devuelve None si OK; Response(...) si falla.\n    \"\"\"\n    configured = getattr(settings, \"ADMIN_API_KEY\", \"\") or \"\"\n    sent = request.headers.get(\"X-API-Key\") or request.META.get(\"HTTP_X_API_KEY\")",
        "detail": "backend.participants.views",
        "documentation": {}
    },
    {
        "label": "admin_participants",
        "kind": 2,
        "importPath": "backend.participants.views",
        "description": "backend.participants.views",
        "peekOfCode": "def admin_participants(request):\n    \"\"\"\n    Lista participantes para el panel admin.\n    Query params:\n      - verified: 1|0\n      - search: texto (en full_name o email)\n      - page: número (default 1)\n      - page_size: número (default 20, max 100)\n    \"\"\"\n    auth = _require_api_key(request)",
        "detail": "backend.participants.views",
        "documentation": {}
    },
    {
        "label": "admin_draw",
        "kind": 2,
        "importPath": "backend.participants.views",
        "description": "backend.participants.views",
        "peekOfCode": "def admin_draw(request):\n    \"\"\"\n    Sortea un ganador entre participantes verificados y envía correo (Celery).\n    \"\"\"\n    auth = _require_api_key(request)\n    if auth:\n        return auth\n    qs = Participant.objects.filter(is_verified=True)\n    count = qs.count()\n    if count == 0:",
        "detail": "backend.participants.views",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "backend.participants.views",
        "description": "backend.participants.views",
        "peekOfCode": "logger = logging.getLogger(__name__)\n@api_view([\"POST\"])\ndef register(request):\n    \"\"\"\n    Crea un participante si el email no existe y envía email de verificación.\n    Respuestas:\n    - 201: {\"message\": \"¡Gracias por registrarte! Revisa tu correo para verificar tu cuenta.\"}\n    - 400: errores de validación\n    \"\"\"\n    s = ParticipantCreateSerializer(data=request.data)",
        "detail": "backend.participants.views",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "backend.manage",
        "description": "backend.manage",
        "peekOfCode": "def main():\n    # 1) Apunta al módulo de settings del proyecto \"core\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'core.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Django no está instalado o el entorno virtual no está activo.\"\n        ) from exc\n    # 2) Ejecuta el comando (runserver, migrate, etc.)",
        "detail": "backend.manage",
        "documentation": {}
    }
]